{"version":3,"file":"static/js/740.c3d199ef.chunk.js","mappings":"yNAEO,SAASA,IACd,IAEIC,EAAY,IAAIC,QAQpB,OAPAD,EAAUE,OAAO,SAAUC,EAAAA,GAQzBC,MAXmB,uEAKE,CACvBC,OAAQ,MACRC,SAAU,SACVC,QAASP,IAIJQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAAAG,GAAI,OAAIA,EAAKC,MAAM,GAE/B,C,sJCRO,SAASC,IAEd,IAAMC,GAAkBC,EAAAA,EAAAA,QAAO,OAG/B,GAAsCC,EAAAA,EAAAA,UAAS,CAC7C,CACEC,aAAc,QACdC,cAAe,WAEjB,eALKC,EAAW,KAAEC,EAAc,KAOlC,GAAgCJ,EAAAA,EAAAA,UAAS,CACvC,CACEC,aAAc,MACdC,cAAe,KAEjB,eALKG,EAAQ,KAAEC,EAAW,MAQ5BC,EAAAA,EAAAA,YAAU,WACRC,GACF,GAAG,IAEH,IAAMA,EAAkB,yCAAG,8FAErBH,EAASI,OAAS,GAAC,kEACD1B,EAAAA,EAAAA,KAAc,KAAD,EAA7B2B,EAAO,OAEbC,OAAOC,QAAQF,GAASG,KAAI,SAAAC,GAC1B,IAAMC,EAAWD,EAAM,GAAGE,MAAM,EAAGF,EAAM,GAAGL,QACtCQ,EAAQ,EAAIH,EAAM,GAiBxB,OAfAR,GAAY,SAACY,GAAS,wBACjBA,GAAS,CACZ,CACAjB,aAAcc,EACdb,cAAee,IACd,IAGHb,GAAe,SAACc,GAAS,wBACpBA,GAAS,CACZ,CACAjB,aAAc,KAAOc,EACrBb,cAAee,EAAME,QAAQ,GAAK,IAAMrB,EAAgBsB,QAAQH,QAC/D,IAEI,IAET,IAAG,2CAEJ,kBA5BuB,mCAwDxB,OACE,iCACE,SAACI,EAAA,EAAM,WAAC,oDACR,mBAAOC,UAAU,QAAO,WACtB,kBAAOA,UAAU,cAAa,UAC5B,2BAEE,eAAIA,UAAU,YAAW,gCAGzB,eAAIA,UAAU,YAAW,UACvB,mBAAQC,GAAG,gBAAgBC,IAAK1B,EAAiB2B,SApCnC,WACxB,IAAMC,EAAmBrB,EAASsB,QAAO,SAAAC,GACvC,OAAIA,EAAK3B,eAAiBH,EAAgBsB,QAAQH,MAAc,KACzDW,CACT,IAAG,GAAG1B,cAENE,GAAe,SAAAc,GAab,OAZiBA,EAAUL,KAAI,SAAAe,GAC7B,IAAMC,EAAkBxB,EAASQ,KAAI,SAAAlB,GACnC,IAAMM,EAAe2B,EAAK3B,aAAa6B,MAAM,KAAK,GAC5C5B,GAAiBP,EAAKO,cAAgBwB,GAAkBP,QAAQ,GACtE,OAAIxB,EAAKM,eAAiBA,EAAqB,KAC3CN,EAAKM,eAAiBH,EAAgBsB,QAAQH,MAAcW,EAAK3B,aAC9DC,EAAgB,IAAMJ,EAAgBsB,QAAQH,KAEvD,IACA,OAAO,kBAAIW,GAAI,IAAE1B,cAAe2B,GAElC,GAGF,GAEF,EAayF,SAC1ExB,EAASQ,KAAI,SAAAe,GACZ,IAAM3B,EAAe2B,EAAK3B,aAC1B,OAAO,mBAA2BgB,MAAOhB,EAAa,SAAE,MAAQA,GAA5CA,EACtB,cAMR,kBAAOqB,UAAU,YAAW,SACzBnB,EAAYU,KAAI,SAACe,GAChB,OACE,2BACE,eAAIN,UAAU,YAAW,SAAEM,EAAK3B,gBAChC,eAAIqB,UAAU,YAAW,SAAEM,EAAK1B,kBAFzB0B,EAAK3B,aAKlB,WAKV,C","sources":["components/apiResponse.js","pages/Rates.js"],"sourcesContent":["import API_KEYS from '../data/currencyAPI.json';\n\nexport function apiResponse () {\n  const CURRENCY_API = 'https://api.apilayer.com/currency_data/live?base=USD&symbols=EUR,GBP';\n\n  let myHeaders = new Headers();\n  myHeaders.append(\"apikey\", API_KEYS.Converter_APIKEY);\n\n  const requestOptions = {\n  method: 'GET',\n  redirect: 'follow',\n  headers: myHeaders\n  }\n  return (\n    fetch(CURRENCY_API, requestOptions)\n      .then(response => response.json())\n      .then(data => data.quotes)\n  );\n};","import React, {\n  useEffect,\n  useState,\n  useRef\n} from 'react';\n\nimport { Helmet } from 'react-helmet';\nimport { apiResponse } from '../components/apiResponse';\nimport '../stylesheets/rates.css';\n\nexport function Rates() {\n\n  const comparedFromRef = useRef('USD')\n  \n  // Uses 2 different useStates to not distort values when changing comparison back and forth \n  const [visualRates, setVisualRates] = useState([\n    {\n      currencyCode: '1 USD', \n      currencyValue: '1 USD', \n    }\n  ]);\n\n  const [rateData, setRateData] = useState([\n    {\n      currencyCode: 'USD', \n      currencyValue: 1, \n    }\n  ]);\n\n  // Runs the API once when the page is loaded.\n  useEffect(() => {\n    getConversionRates()\n  }, [])\n\n  const getConversionRates = async() => {\n    // Makes sure this function only runs once because useEffect runs twice.\n    if (rateData.length > 1) return;\n    const promise = await apiResponse();\n\n    Object.entries(promise).map(entry => {\n      const currency = entry[0].slice(3, entry[0].length);\n      const value = 1 / entry[1];\n\n      setRateData((prevState) => ([\n        ...prevState,\n        {\n        currencyCode: currency,\n        currencyValue: value\n        }\n      ]));\n\n      setVisualRates((prevState) => ([\n        ...prevState,\n        {\n        currencyCode: '1 ' + currency,\n        currencyValue: value.toFixed(8) + ' ' + comparedFromRef.current.value,\n        }\n      ]));\n      return null;\n\n    });\n\n  };\n\n  // Changes currency which you compare from.\n  const changeComparation = () => {\n    const comparedCurrency = rateData.filter(rate => {\n      if (rate.currencyCode !== comparedFromRef.current.value) return null;\n      return rate;\n    })[0].currencyValue;\n\n    setVisualRates(prevState => {\n      const newState = prevState.map(rate => {\n        const rateCalculation = rateData.map(data => {\n          const currencyCode = rate.currencyCode.split(' ')[1];\n          const currencyValue = (data.currencyValue / comparedCurrency).toFixed(8);\n          if (data.currencyCode !== currencyCode) return null;\n          if (data.currencyCode === comparedFromRef.current.value) return rate.currencyCode;\n          return currencyValue + ' ' + comparedFromRef.current.value;\n\n        });\n        return {...rate, currencyValue: rateCalculation};\n\n      });\n      return newState;\n\n    });\n\n  };\n\n  return (\n    <>\n      <Helmet><title>Converter | Rates</title></Helmet>\n      <table className='table'>\n        <thead className='tableheader'>\n          <tr>\n\n            <th className='tableHead'>\n              Compare rate from\n            </th>\n            <th className='tableHead'>\n              <select id='compareSelect' ref={comparedFromRef} onChange={changeComparation}>\n                {rateData.map(rate => {\n                  const currencyCode = rate.currencyCode;\n                  return <option key={currencyCode} value={currencyCode}>{'To ' + currencyCode}</option>\n                })}\n              </select>\n            </th>\n          </tr>\n\n        </thead>\n        <tbody className='tableBody'>\n          {visualRates.map((rate) => {\n            return (\n              <tr key={rate.currencyCode}>\n                <td className='tableData'>{rate.currencyCode}</td>\n                <td className='tableData'>{rate.currencyValue}</td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </>\n  )\n};"],"names":["apiResponse","myHeaders","Headers","append","API_KEYS","fetch","method","redirect","headers","then","response","json","data","quotes","Rates","comparedFromRef","useRef","useState","currencyCode","currencyValue","visualRates","setVisualRates","rateData","setRateData","useEffect","getConversionRates","length","promise","Object","entries","map","entry","currency","slice","value","prevState","toFixed","current","Helmet","className","id","ref","onChange","comparedCurrency","filter","rate","rateCalculation","split"],"sourceRoot":""}